/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00101000, B00001000,
  B00010000, B00010100,
  B00101000, B00001000,
  B00000111, B11100000,
  B00000100, B00100000,
  B00000100, B00100000,
  B00000010, B00100000,
  B00000010, B01000000,
  B00000001, B10000000,
  B00000110, B01111000,
  B00111000, B00000000,
  B00000000, B00000000,
  B00000000, B00010000,
  B00000000, B00011110,
  B00111000, B00010000,
  B00000000, B00000000
  };

static const unsigned char PROGMEM oldman_bmp[] =
{
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xe0,0x0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xfe,0x1f,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xfd,0xff,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xf3,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x7f,0xff,
0xff,0xcf,0xff,0xff,0xff,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf,0xf,0xff,
0xff,0xdf,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x4f,0xe3,0xff,
0xff,0x9f,0xff,0xff,0xff,0xf9,0xff,0xf8,0xff,0x7f,0xf1,0xff,0xf3,0xf7,0x79,0xff,
0xff,0x3f,0xfc,0x7f,0x3f,0xfd,0xff,0xf2,0x7f,0x7f,0xf4,0xff,0xf7,0xfe,0xfd,0xff,
0xfe,0x7f,0xfb,0x7e,0xdf,0xfe,0xff,0xf7,0x7f,0x7f,0xf6,0xff,0xe7,0xfe,0xfd,0xff,
0xfe,0xff,0xfb,0x7e,0xdf,0xbe,0x7f,0xef,0x3f,0x7f,0xf7,0x7f,0xef,0xff,0xfd,0xff,
0xfe,0xff,0x78,0x7e,0x1f,0x3f,0x7f,0xef,0xbf,0x7f,0xf7,0x7f,0xef,0xf,0x85,0xff,
0xfe,0xfe,0x7c,0xfe,0x3e,0xbf,0x7f,0xef,0xbf,0x7f,0xf7,0x3f,0xef,0xf,0x81,0xff,
0xfe,0xfd,0xbc,0x7e,0x7e,0xbf,0x7f,0xef,0xbf,0x7f,0xf7,0xbf,0xe7,0x2f,0x93,0xff,
0xfe,0xfd,0xb9,0x7d,0x78,0xbf,0x7f,0xef,0xbf,0x7f,0xf7,0xbf,0xf7,0xd,0x83,0xff,
0xfe,0xfd,0x87,0xb,0xb3,0xbf,0x7f,0xef,0xbf,0x7f,0xf7,0xbf,0xf3,0xf8,0xfb,0xff,
0xfe,0xfd,0xff,0xe7,0xc7,0xbf,0x7f,0xef,0xbf,0x7f,0xf7,0xbf,0xf9,0xf8,0xf3,0xff,
0xfe,0xfd,0xff,0xff,0xff,0xbf,0x7f,0xe7,0xbf,0x7f,0xef,0xbf,0xfc,0xfe,0xf7,0xff,
0xfe,0xfd,0xff,0xff,0xff,0xbf,0xbf,0xef,0xbf,0x3f,0xef,0xbf,0xfe,0x1f,0xc7,0xff,
0xfe,0xfd,0xe0,0xff,0x8f,0xbf,0xbf,0xef,0x3f,0xbf,0xef,0xbf,0xff,0xa,0x8f,0xff,
0xfc,0xfd,0xff,0xff,0xf3,0xbf,0xbf,0xe7,0x7f,0xbf,0xef,0x3f,0xff,0xc0,0x3f,0xff,
0xfd,0xfd,0xff,0xff,0xff,0xbf,0xbf,0xf6,0xff,0xbf,0xe6,0x7f,0xff,0xea,0x9f,0xff,
0xfd,0xfd,0xff,0xff,0xff,0xbf,0xbf,0xf1,0xff,0x8f,0xf8,0xff,0xff,0xef,0xdf,0xff,
0xfd,0xfd,0xff,0xff,0xff,0xbf,0xbf,0xff,0xff,0xe1,0xff,0xff,0xff,0xf0,0x3f,0xff,
0xfd,0xfd,0xf8,0xff,0xc7,0xbf,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xfd,0xfd,0xfa,0xff,0xd7,0x3f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xfb,0xfd,0xfa,0xff,0xd7,0x7f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xfb,0xfd,0xfa,0xff,0xd7,0x7f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xfb,0xfd,0xf8,0xfd,0xc7,0x7f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0xff,
0xfb,0xfd,0xf8,0xfd,0xc7,0x3f,0x9f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x66,0xff,
0xfb,0xfd,0xf8,0xfd,0xc7,0xbf,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0x2e,0x7f,
0xf5,0x7e,0xf8,0xfd,0xc7,0xbf,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0x8f,0x7f,
0xf1,0x7e,0xff,0xfe,0xff,0xbf,0xdf,0xff,0xff,0xff,0xe7,0xfd,0xbf,0xfb,0xcf,0x7f,
0xf2,0x7e,0xff,0xfe,0x7f,0xbf,0xdf,0xfd,0xfd,0xff,0xc7,0xfd,0xbf,0xfb,0xfe,0xff,
0xf2,0x7e,0xff,0xff,0x7f,0xbf,0xdf,0xf8,0xfd,0xff,0xd7,0xfd,0xbf,0x79,0xfe,0xff,
0xf6,0x7e,0xff,0xfb,0xbf,0xbb,0xdf,0xfa,0xf8,0xff,0xd7,0xfd,0x9f,0x7c,0x7d,0xff,
0xfe,0x76,0xff,0xf9,0xbf,0xbb,0xdf,0xfa,0x7a,0xff,0xdb,0xfd,0xdf,0x7f,0x31,0xff,
0xff,0x36,0xff,0xfc,0xdf,0xbb,0x1f,0xfb,0x72,0xff,0xdb,0xf9,0xdf,0x7f,0xbb,0xff,
0xff,0x36,0xff,0xff,0x1f,0xb1,0x1f,0xf7,0x76,0xff,0xbb,0xfb,0xef,0x7f,0xbb,0xff,
0xff,0x16,0xff,0xff,0xff,0xb1,0x5f,0xf7,0xb6,0xff,0xbb,0xfb,0xef,0x7f,0xbb,0xff,
0xff,0x47,0x7f,0xff,0xff,0x92,0x7f,0xf7,0xae,0xff,0xbd,0xfb,0xe7,0x7f,0xbb,0xff,
0xff,0x4f,0x7f,0xff,0xff,0xda,0xff,0xf7,0x8e,0xff,0xbd,0xfb,0xf7,0x7f,0xbb,0xff,
0xff,0x4f,0x7f,0xff,0xff,0xdb,0xff,0xf7,0xce,0xff,0xa1,0xfb,0xf7,0x7f,0xb7,0xff,
0xff,0xdf,0x7f,0xff,0xff,0xdb,0xff,0xf7,0xee,0xff,0x3d,0xfb,0xf3,0x7f,0x37,0xff,
0xff,0xfe,0x7f,0xf0,0x7f,0xdb,0xff,0xe7,0xfe,0x7f,0x7c,0xfb,0xfa,0xff,0x67,0xff,
0xff,0xfe,0xff,0xe7,0x7f,0xdf,0xff,0xef,0xff,0x7f,0x7e,0xfb,0xfa,0xff,0x6f,0xff,
0xff,0xfe,0x7f,0xcf,0x3f,0xbf,0xff,0xef,0xff,0x7f,0x7e,0xfb,0xf8,0xff,0x6f,0xff,
0xff,0xff,0x7f,0xdf,0xbf,0xbf,0xff,0xe7,0xff,0x7f,0x7e,0xfb,0xfc,0xff,0x6f,0xff,
0xff,0xff,0x7f,0xff,0xff,0xbf,0xff,0xf7,0xff,0x3f,0x7e,0xfb,0xff,0xff,0x6f,0xff,
0xff,0xff,0x7f,0xff,0xff,0xbf,0xff,0xf7,0xff,0xbf,0x7e,0xff,0xff,0xff,0x6f,0xff,
0xff,0xff,0x7f,0xff,0xff,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x67,0xff,
0xff,0xff,0x3f,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x71,0xff,
0xff,0xff,0xbf,0xff,0xfe,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xfc,0xff,
0xff,0xff,0x9f,0xff,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0xde,0xff,
0xff,0xff,0xc0,0x0,0x3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0xce,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0x8e,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfb,0x26,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xf1,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  Serial.begin(9600);

  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  // init done
  
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  //delay(2000);

  // Clear the buffer.
  display.clearDisplay();

  // draw a single pixel
  display.drawPixel(10, 10, WHITE);
  // Show the display buffer on the hardware.
  // NOTE: You _must_ call display after making any drawing commands
  // to make them visible on the display hardware!
  display.display();
  //delay(2000);
  display.clearDisplay();
  display.drawBitmap(0,0, oldman_bmp, 128, 64, WHITE);
  delay(2000);
  // draw many lines
  testdrawline();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw rectangles
  testdrawrect();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw multiple rectangles
  testfillrect();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw mulitple circles
  testdrawcircle();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw a white circle, 10 pixel radius
  display.fillCircle(display.width()/2, display.height()/2, 10, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();

  testdrawroundrect();
  delay(2000);
  display.clearDisplay();

  testfillroundrect();
  delay(2000);
  display.clearDisplay();

  testdrawtriangle();
  delay(2000);
  display.clearDisplay();
   
  testfilltriangle();
  delay(2000);
  display.clearDisplay();

  // draw the first ~12 characters in the font
  testdrawchar();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw scrolling text
  testscrolltext();
  delay(2000);
  display.clearDisplay();

  // text display tests
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Hello, world!");
  display.setTextColor(BLACK, WHITE); // 'inverted' text
  display.println(3.141592);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print("0x"); display.println(0xDEADBEEF, HEX);
  display.display();
  delay(2000);

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(30, 16,  logo16_glcd_bmp, 16, 16, 1);
  display.display();

  // invert the display
  display.invertDisplay(true);
  delay(1000); 
  display.invertDisplay(false);
  delay(1000); 

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
}


void loop() {
  
}


void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }
  int counter = 0;
  int noteStep = 0;
  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE);
    }
    display.display();
    //delay(20);
    if( counter > 1) {
      noteStep += 1;
      counter = 0;
      //tone(13, 40 * noteStep);
    }
    counter +=1;
    if (noteStep % 2 > 0) {
      noTone(13);
      delay(5 + (10* 0.1 * noteStep));
    }
    
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random(display.width());
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random(5) + 1;
      }
    }
   }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  for (uint8_t i=0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }    
  display.display();
}

void testdrawcircle(void) {
  for (int16_t i=0; i<display.height(); i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, WHITE);
    display.display();
  }
}

void testfillrect(void) {
  uint8_t color = 1;
  for (int16_t i=0; i<display.height()/2; i+=3) {
    // alternate colors
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, color%2);
    display.display();
    color++;
  }
}

void testdrawtriangle(void) {
  for (int16_t i=0; i<min(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    display.display();
  }
}

void testfilltriangle(void) {
  uint8_t color = WHITE;
  for (int16_t i=min(display.width(),display.height())/2; i>0; i-=5) {
    display.fillTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}

void testdrawroundrect(void) {
  for (int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, WHITE);
    display.display();
  }
}

void testfillroundrect(void) {
  uint8_t color = WHITE;
  for (int16_t i=0; i<display.height()/2-2; i+=2) {
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, color);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}
   
void testdrawrect(void) {
  for (int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, WHITE);
    display.display();
  }
}

void testdrawline() {  
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, WHITE);
    display.display();
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, WHITE); 
    display.display();
  }
  delay(250);
}

void testscrolltext(void) {
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(10,0);
  display.clearDisplay();
  display.println("scroll");
  display.display();
 
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);    
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
}
